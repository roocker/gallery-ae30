---
/*
TODO:
- [ ] how to sort gallery?
- [ ] allProjects filter with archived?
- [ ] select from react-select for multiple tag input
- [x] toggle filter menu on/off with an F button
- [x] rename gridcontrols to gridfilters
- [x] gridcontrols = toggle.filter.btn, top, bottom scroll btn?
*/

import Layout from '../layouts/Layout.astro';
import GridProj from '../components/GridProj';
// import GridControls from '../components/GridControls';
import GridControlWrapper from '../components/GridControlWrapper';
import { getCollection } from 'astro:content';

import { getImage } from 'astro:assets';

import { CURRENTYEAR } from '../consts';

const allProjects = await getCollection('projects');
// console.log("OlleProjekte:", allProjects);

const settings = await getCollection('settings');

// console.log("OlleSettings:", settings);
const settingsFilter = settings[0].data.filter;

const settingFilterCat = settingsFilter.cat;
const settingFilterTag = settingsFilter.tag;
const settingFilterYear = settingsFilter.year;
const settingFilterSize = settingsFilter.size;

const noFiltersActiveInCmsSettings = (!settingFilterCat && !settingFilterTag && !settingFilterYear && !settingFilterSize);
// console.log("noFiltersActiveInCmsSettings" , noFiltersActiveInCmsSettings)

// sort allProjects by CMS priority List & by date-added;

const settingsPrioSort = settings[1].data.PrioList;
// console.log("settingsPrioSort:", settingsPrioSort);

const sortedProjects = allProjects.sort((a, b) => {
  const aIndex = settingsPrioSort.findIndex(item => item['relation-proj'] === a.slug);
  const bIndex = settingsPrioSort.findIndex(item => item['relation-proj'] === b.slug);

  if (aIndex === -1 && bIndex === -1) {
    return new Date(b.data.publishDate) - new Date(a.data.publishDate);
  } else if (aIndex !== -1 && bIndex !== -1) {
    return aIndex - bIndex;
  } else if (aIndex !== -1) {
    return -1;
  } else {
    return 1;
  }
});
// console.log("sortedProjects:", sortedProjectsByPublishDate);

// Image Optimization
// ------------------------------------------------

/* import budl from '~/assets/media/IMG_20220112_085913.jpg';
const optBudl = await getImage({ src:budl });
console.log("optBudl", optBudl) */

/* const optTitleImgs = allProjects.map((proj) => {
await getImage({
src : proj.titleimg.img,
format: 'webp',
width : 300,
}),
}) 
console.log("opttitleimgs", optTitleImgs) */


  const optTitleImgs = await Promise.all(
    allProjects.map(async (proj) => {
    console.log("proj.data.titleimg.img", proj.data.titleimg.img)
      const img = await getImage({
        src: proj.data.titleimg.img,
        format: 'webp',
        width: 600,
      });
      return img.src;
    })
  );

// optTitleImgs();

// console.log("opttitleimgs", optTitleImgs);

---
<Layout title="ae30 - gallerie - work in progress" description="gallery" image="">

<section id="grid-gallery" aria-label="gallery grid overview">
  <!-- <testgallery/> -->
    <!--  /${proj.slug}`}  -->



    <GridProj
    client:only
    projects={allProjects}
    covers={optTitleImgs}
    />

    {noFiltersActiveInCmsSettings ? '' :
    <GridControlWrapper
    client:load
    projects={allProjects}

    btnname="Filter MenÃ¼ ein-/ausblenden"

    defaultcat="all"
    defaulttag="all"
    defaultyear1={1980}
    defaultyear2={CURRENTYEAR}
    defaultsize1={0}
    defaultsize2={10000}

    />
    }

    <!--
    {nofiltersactiveincmssettings ? '' :
      <gridcontrols
      client:load
      defaultcat="all"
      defaulttag="all"
      defaultyear1={1990}
      defaultyear2={currentyear}
      defaultsize1={0}
      defaultsize2={7000}
      />
      } 
      -->



    <!--
    {allprojects.map((proj) => 
    <gridproj 
    title={proj.data.title} 
    link={`../${proj.data.category}/${proj.slug}`}
    titleimg={proj.data.titleimg.img} 
    titlealt={proj.data.titleimg.alt} 
    cat={proj.data.category} 
    /> )}
    -->

</section>
</Layout>

<style>
  #grid-gallery{
    display: grid;
    grid-template-columns: repeat(var(--gcolnum), 1fr);
    grid-auto-rows: min-content;
    grid-auto-flow: dense;

    align-items: flex-start;
    gap: calc( 0.5 * var(--ggapspx));
    margin-bottom: 10em;
  }
  @media only screen and (min-width: 64em /* var(--vws) */) { 
    #grid-gallery{
      gap: var(--ggapspx);
    }
  }
  /* #grid-gallery img{
    max-width: 80vw;
  } */
</style>

