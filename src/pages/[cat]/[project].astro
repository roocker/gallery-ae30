---
import Layout from "../../layouts/Layout.astro";
import { CollectionEntry, getCollection } from "astro:content";
// import BasicScripts from '../../components/basicScripts.astro';
import TextBlockModal from "../../components/TextBlockModal";
import SSfigure from "../../components/SSfigure";
import SlideshowCounter from "../../components/SlideshowCounter";
import SlideshowAlt from "../../components/SlideshowAlt";
import ModalBtn from "../../components/ModalBtn";
import PlanBtn from "../../components/PlanBtn";
import SlideshowBtn from "../../components/SlideshowBtn";
import PlaybackBtn from "../../components/PlaybackBtn";
import { getImage } from "astro:assets";

export async function getStaticPaths() {
  const allProjects = await getCollection("projects");
  return allProjects.map(proj => ({
    params: { project: proj.slug, cat: proj.data.category },
    props: proj,
  }));
}

type Props = CollectionEntry<"projects">;
const proj = Astro.props;

const p = proj.data;

const { Content } = await proj.render();

const rawSSPictures = [p.titleimg.img].concat(p.fotos.map(img => img.foto));

const rawSSPicturesAlts = [p.titleimg.alt].concat(p.fotos.map(img => img.alt));

let rawSSPlans;
let rawSSPlansAlts;

if (p.plans === undefined) {
  rawSSPlans = rawSSPictures;
  rawSSPlansAlts = rawSSPicturesAlts;
} else {
  rawSSPlans = p.plans.map(plan => plan.plan);
  rawSSPlansAlts = p.plans.map(plan => plan.alt);
}

// Image Optimization
// ----------------------------
// console.log("rawSSPictures", rawSSPictures);

const optSSPictures = await Promise.all(
  rawSSPictures.map(
    async img =>
      await getImage({
        src: img,
        format: "webp",
        width: 1920,
      })
  )
);

// console.log(p)
---

<Layout
  title={`AE30 - ${p.title_l}`}
  description={`${p.category}/${p.title}`}
  image=""
>
  <section
    class="project_presentation"
    aria-label={`Projekt ${p.title} Presentation`}
  >
    <article class="project">
      <SSfigure
        client:only
        pictures={optSSPictures}
        pictureTitles={rawSSPicturesAlts}
        plans={rawSSPlans}
        planTitles={rawSSPlansAlts}
        autoPlayInterval={4}
      />

      <TextBlockModal client:load>
        <h2>{p.title_l}</h2>
        {p.title ? <h3>{p.title_zzl}</h3> : ""}

        <dl class="textmodal_ul">
          {
            p.project_keys.status ? (
              <>
                <dt>Status:</dt>
                <dd>Status:{p.project_keys.status}</dd>
              </>
            ) : (
              ""
            )
          }
          <dt>Jahr:</dt><dd>
            {p.project_keys.year.getFullYear()} - {
              p.project_keys.year2.getFullYear()
            }
          </dd>
          <dt>NFL:</dt><dd>{p.project_keys.area} m²</dd>
          <dt>Typ:</dt><dd>{p.project_keys.tags.map(tag => tag + ", ")}</dd>
          <!--
          <dt>Typ:</dt><dd>Neubau, Erweiterung</dd>
          <dt>Tags:</dt><dd>{p.subcategory}</dd>
          -->
        </dl>

        <p><Content /></p>
      </TextBlockModal>
    </article>

    <section class="controls" aria-label="Plankopf Footer Controls">
      <div class="footer_line alt_line">
        <SlideshowAlt client:load />
      </div>

      <div class="footer_line title_line">
        <h3 class="footer_title">{p.title}</h3>
      </div>

      <div class="footer_line control_line">
        <SlideshowBtn dir="prev" client:load>Vorheriges Bild</SlideshowBtn>
        <ModalBtn client:load>Text ein-/ausblenden</ModalBtn>
        <PlaybackBtn client:load>Slideshow pausieren</PlaybackBtn>
        <PlanBtn client:load>Pläne ein-/ausblenden</PlanBtn>
        <SlideshowBtn dir="next" client:load>Nächstes Bild</SlideshowBtn>
      </div>

      <div class="counter_line footer_line">
        <SlideshowCounter client:load />
      </div>
    </section>
  </section>
</Layout>

<style is:global>
  .wrapper {
    margin: 0 !important;
    /* background: lightblue !important; */
  }
  .slideshow_div {
  }
</style>

<style>
  .project_presentation {
    /* background: green; */
    min-height: 100vh;

    display: flex;
    align-items: center; /* center vertically flexbox */
    justify-content: center; /* center horizontally flex */
  }
  article.project {
    max-width: 100%;
    max-height: 100%;
    overflow: hidden;
    /* background: lightblue;  */
  }

  article .pictures {
  }
  article .plans {
  }
  article .texts {
  }
  /* FOOTER CONTROLS  ----------------------------*/

  .controls {
    /*  document.querySelector(".controls"); in Slideshow controls color */
    position: fixed;

    z-index: 8 !important;
    font-family: var(--fsans2);
    bottom: 1em;
    left: auto;

    display: flex;
    flex-direction: column;

    color: var(--cgrey);
    text-align: center;
    align-items: center;

    justify-content: center;
    /* background: green; */
  }

  .footer_line {
    line-height: 2em;
    height: 2em;
    backdrop-filter: blur(1px);
    /* border-radius: 50%; */
    /* background: lavender; */
    font-family: var(--fsans2);
  }

  .control_line {
    display: flex;
    justify-content: space-evenly;
    align-self: center;

    margin: 0.5em 0 0.5em 0;
    line-height: 3em;
    height: 3em !important;

    /* background: green; */
  }
  .title_line {
    width: auto;
    border-radius: 1em;
    padding: 0 1em 0 1em;
    /* background: red; */
  }
  h3.footer_title {
    font-size: 1.25rem;
    text-transform: uppercase;
    /* font-weight: 100; */
    margin: 0 !important;
  }
  .alt_line {
    font-size: 1rem;
    border-radius: 1em;
    padding: 0 1em 0 1em;
    /* background: orange; */
  }
  /* #rev counter_line vertical position from bot should be equal to gridlayout */
  .counter_line {
    font-family: var(--fsans3) !important;
    font-size: 1.25rem;
    /* font-weight: bold; */
    /* color: red; */
    /* background: blue; */
  }

  @media only screen and (min-width: 48em/* var(--vwT) */) {
    .title_line {
      position: absolute;
      left: 2em;
      z-index: 10;
    }
    .alt_line {
      position: absolute;
      right: 2em;
      z-index: 10;
    }
    .controls {
      width: 100vw;
      display: flex;
      flex-direction: row;
      /* margin: 0; */
      align-items: center;
      justify-content: center;
      /* background: green; */
    }
    .control_line {
      position: absolute;
      bottom: 2.5em;
    }
  }
  /* Modal Styles ----------------- */

  /* Modal Text styles------------------- */

  h2 {
    /* font-size: 1.2em; */
    /* line-height: 1em; */
    text-transform: uppercase;
    /* margin: 0; */
    font-family: var(--fsans2);
  }

  dl {
    font-size: 0.8em;
    font-family: var(--fsans2);
    /* line-height: calc(var(--fline_height) / 2); */
    line-height: 1.2rem;
  }
  dt {
    float: left;
    padding-right: 2em;

    display: none;
    text-indent: -9999px;
  }
  dd {
    margin: 0;
  }
</style>
