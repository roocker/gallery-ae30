import { getCollection } from 'astro:content';
import '../styles/grid_controls.css'
import SlideshowCounter from './SlideshowCounter';
import { useStore } from '@nanostores/react';
import { stateSelectedCat, stateSelectedCatProjs } from '../states';
import { useEffect } from 'react';

const allProjects = await getCollection('projects');
const allCategories = await getCollection('categories');

// console.log(allProjects[0]);

// Get all categorie shorts from project collection
const allCatsFromProjs = [... new Set(allProjects.map((proj) => {return proj.data.category}))];

// TEST compare all allCatsFromProjs to categories collection 

const allShortsFromCats = [... new Set(allCategories.map((cat) => {return cat.data.short}))];

if (JSON.stringify(allCatsFromProjs.sort()) == JSON.stringify(allShortsFromCats.sort())) {
  console.log("APP-TEST(successful):","allCatsFromProjs === allTitlesFromCats");
} else {
  console.log("APP-TEST(error):","found categories in projects not matching categories, pls check your projects for exact string on the category property.", allCatsFromProjs, "!=" , allShortsFromCats)
}

// define allCats for select options 

const allTitlesFromCats = [... new Set(allCategories.map((cat) => {return cat.data.title}))];

const allCatsTitles = allTitlesFromCats.map(cat => cat.split(' ')[0]);
// console.log("allCatsTitles", allCatsTitles)

const allCatsURLs = [... new Set(allCategories.map((cat) => {return cat.data.short}))]
// console.log("allCatsURLs", allCatsURLs)


// const allCats = allProjects.data.category;

// const projsOfSelCat = 

  function GridControls (props) {

    let index = "00";
    const defaultCat = props.defaultCat;  
    const defaultTag = props.defaultTag;  
    const defaultYear = props.defaultYear;
    const defaultSize = props.defaultSize;

    const selectedCat = useStore(stateSelectedCat);

    useEffect(() => {
      function setNewProjs() {
        const filteredProjsOfSelCat = allProjects.filter((proj) => proj.data.category === selectedCat);
        stateSelectedCatProjs.set(filteredProjsOfSelCat);
        // console.log("Projs of Cat Selected(",selectedCat, "):", filteredProjsOfSelCat);
      }
      setNewProjs();

    }, [selectedCat, allProjects])


    const indexToNotCullfromSelCat = allProjects
      .map((proj, index) =>{
        if(proj.data.category === selectedCat){
          return index;
        }
        return null;
      })
      .filter((index) => index !== null);

    // console.log("indexToNotCullfromSelCat", indexToNotCullfromSelCat);


    const handleCategoryChange = (e) => {
      stateSelectedCat.set(e.target.value);
      // console.log("Selected category:", e.target.value);
    };


    return(
      <section className="controls" aria-label="Image Grid Controls">
      <p className="line test">live output without full site reload: {selectedCat}</p>

      <select
      className="select_cat"
      onChange={handleCategoryChange}
      defaultValue={defaultCat}
      >
      <option value="all">Kategorie</option>
      {allCatsTitles.map((cat, indexCat) => (
        <option
        key={indexCat}
        value={allCatsURLs[indexCat]}
        >
        {cat}
        </option>
      ))}
      </select>


      <p className="line counter_line">
      <span className="counter_number index">{index}</span> / <span className="counter_number length">{allProjects.length}</span>
      </p>
      </section>
    )


  }
export default GridControls
